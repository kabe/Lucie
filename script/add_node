#!/usr/bin/env ruby


# ENV[ 'RAILS_ENV' ] = 'production'


require File.dirname( __FILE__ ) + '/../config/boot'
require 'optparse'


node_name = ARGV.shift

gateway_address = nil
installer_name = nil
ip_address = nil
mac_address = nil
netmask_address = nil
wol = false

trace = false


ARGV.options do |opts|
  opts.banner = 'usage: node add <node-name> --installer <installer-name> -a <IP address> -n <netmask> -g <gateway> --mac <MAC address>'

  opts.separator ''

  opts.on( '-i', '--installer installer name', String, 'The installer name for the installation' ) do | v |
    installer_name = v
  end

  opts.on( '-a', '--address address', String, 'IP address' ) do | v |
    ip_address = v
  end

  opts.on( '-n', '--netmask address', String, 'Netmask address' ) do | v |
    netmask_address = v
  end

  opts.on( '-g', '--gateway address', String, 'Gateway address' ) do | v |
    gateway_address = v
  end

  opts.on( '-t', '--trace', 'Print out exception stack traces' ) do
    trace = true
  end

  opts.on( '-m', '--mac MAC address', String,
           "The MAC address of the NIC (eg. 00:E0:81:05:D3:8B)" ) do | v|
    mac_address = v
  end

  opts.separator ''

  opts.on( '-w', '--wol', 'Remote power-on using wake on LAN' ) do
    wol = true
  end

  opts.separator ''

  opts.on( '-t', '--trace', 'Print out exception stack traces' ) do
    trace = true
  end

  opts.on( '-h', '--help', 'Show this help message.' ) do
    puts opts
    exit 1
  end

  args = opts.parse!

  unless node_name and installer_name
    STDERR.puts 'Node name and Installer name are mandatory'
    STDERR.puts
    puts opts
    exit -1
  end

  unless( ip_address and netmask_address and gateway_address and mac_address )
    STDERR.puts 'IP, Netmask, Gateway, and MAC address are mandatory'
    STDERR.puts
    puts opts
    exit -1
  end


  # Node Name can only contain alphanumeric characters and numbers
  if node_name.match /[^-_a-zA-Z0-9]/
    STDERR.puts "'#{node_name}' is not a valid node name. Node name should only contain alphanumeric characters and numbers, dashes and underscores, and no whitespace."
    exit -1
  end

  hex = /[a-fA-F0-9][a-fA-F0-9]/
  unless mac_address.match /\A#{hex}:#{hex}:#{hex}:#{hex}:#{hex}:#{hex}\Z/
    STDERR.puts "'#{mac_address}' is not a valid MAC address."
    exit -1
  end
end


begin
  require RAILS_ROOT + '/config/environment'
  require 'lib/popen3/shell'
  require 'drb/drb'

  ENV[ 'NODE_NAME' ] = node_name
  ENV[ 'INSTALLER_NAME' ] = installer_name
  ENV[ 'MAC_ADDRESS' ] = mac_address
  ENV[ 'IP_ADDRESS' ] = ip_address
  ENV[ 'GATEWAY_ADDRESS' ] = gateway_address
  ENV[ 'NETMASK_ADDRESS' ] = netmask_address

  lucie_daemon = DRbObject.new_with_uri( LucieDaemon.uri )

  unless Installers.find( installer_name )
    raise "installer '#{ installer_name }' is not added yet."
  end

  begin
    load './lib/tasks/add_node.rake'
    Rake::Task[ 'lucie:add_node' ].invoke
  rescue => e
    if trace
      raise
    else
      STDERR.puts "FAILED: #{ e.message }"
      exit -1
    end
  end

  lucie_daemon.enable_node node_name, installer_name, wol

rescue DRb::DRbConnError
  Nodes.remove!( node_name ) rescue nil
  if trace
    raise
  else
    STDERR.puts "FAILED: Lucie daemon (lucied) is down."
    exit -1
  end
rescue => e
  Nodes.remove!( node_name ) rescue nil
  if trace
    raise
  else
    STDERR.puts "FAILED: #{ e.message }"
    exit -1
  end
end


puts "Node '#{ node_name }' added."


### Local variables:
### mode: Ruby
### coding: utf-8
### indent-tabs-mode: nil
### End:
