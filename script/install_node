#!/usr/bin/env ruby


RAILS_ENV = 'install_node'


require File.join( File.dirname( __FILE__ ), '..', 'config', 'environment' )
require 'fileutils'
require 'optparse'
require 'popen3/shell'


pre_scripts = []
multi = false
trace = false


opts = OptionParser.new

opts.banner = 'usage: node install <node-name>'

opts.separator ''

opts.on( '-s', '--script script file', String, 'The (Re-)boot scripts executed before installation' ) do | v |
  pre_scripts = v.split( ',' )
end

opts.separator ''

opts.on( '-v', '--verbose', 'Be verbose.' ) do
  Lucie::Log.verbose = true
end

opts.on( '-t', '--trace', 'Print out exception stack traces' ) do
  Lucie::Log.verbose = true
  trace = true
end

opts.on( '-h', '--help', 'Show this help message.' ) do
  puts opts
  exit 1
end

opts.separator ''

opts.on( '-m', '--multi', 'Internal use only.' ) do
  multi = true
end


opts.parse! ARGV


begin
  node_name = ARGV.shift

  unless node_name
    raise MandatoryOptionError, 'Node name not defined.'
  end
  node = Nodes.find( node_name )
  unless node
    raise "Node '#{ node_name }' is not added yet."
  end

  installer = Installers.find( node.installer_name )

  unless installer
    raise "installer '#{ node.installer_name }' is not added yet."
  end
  if installer.last_build.nil?
    raise "installer '#{ node.installer_name }' is not built yet."
  end

  case installer.last_build.status
  when 'failed'
    raise "installer '#{ node.installer_name }' is broken."
  end

  label = node.latest_install ? node.latest_install.label + 1 : 0
  install_log_dir = File.expand_path( "#{ Configuration.nodes_directory }/#{ node_name }/install-#{ label }" )
  FileUtils.mkdir_p install_log_dir
  install_log_path = File.join( install_log_dir, 'install.log' )
  Lucie::Log.info "Starting lucie installer."
  Lucie::Log.info "Install log will be redirected to #{ install_log_path }."
  RAILS_DEFAULT_LOGGER.instance_variable_set :@log, File.open( install_log_path, 'w' )

  lucie_daemon = LucieDaemon.server

  unless multi
    lucie_daemon.restart_puppet

    begin
      FileUtils.rm File.expand_path( '~/.ssh/known_hosts' )
    rescue
      # ignore
    end

    pre_scripts.each do | each |
      lucie_daemon.sudo each
    end
  end

  Lucie::Log.info "Connecting to #{ node_name } ..."
  catch( :node_up ) do
    loop do
      Popen3::Shell.open do | shell |
        shell.on_success do
          throw :node_up
        end
        shell.exec( %{ssh -o "StrictHostKeyChecking no" root@#{ node_name } "grep -q nfsroot /proc/cmdline"}, { :env => { 'LC_ALL' => 'C' } } )
      end
      sleep 10
    end
  end

  Installer.install node
  lucie_daemon.disable_node node_name

rescue Interrupt
  Lucie::Log.error 'Interrupted.'
  exit -1
rescue MandatoryOptionError => e
  Lucie::Log.error e.message
  STDERR.puts
  STDERR.puts opts
  exit -1
rescue => e
  Lucie::Log.error e.message
  if trace
    e.backtrace.each do | each |
      Lucie::Log.error each
    end
  end
  exit -1
end


Lucie::Log.verbose = true
Lucie::Log.info "Node '#{ node_name }' installed."


### Local variables:
### mode: Ruby
### coding: utf-8-unix
### indent-tabs-mode: nil
### End:
