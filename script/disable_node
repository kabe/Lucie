#!/usr/bin/env ruby


RAILS_ENV = 'disable_node'


require File.join( File.dirname( __FILE__ ), '..', 'config', 'environment' )
require 'optparse'


Lucie::Log.event "#{ __FILE__ } started."
at_exit do
  Lucie::Log.event "#{ __FILE__ } finished."
end


trace = false


opts = OptionParser.new

opts.banner = 'usage: node disable <node-name>'

opts.separator ''

opts.on( '-v', '--verbose', 'Be verbose.' ) do
  Lucie::Log.verbose = true
end

opts.on( '-t', '--trace', 'Print out exception stack traces' ) do
  Lucie::Log.verbose = true
  trace = true
end

opts.separator ''

opts.on( '-h', '--help', 'Show this help message.' ) do
  puts opts
  exit 1
end

opts.parse! ARGV


begin
  node_name = ARGV.shift

  ENV[ 'NODE_NAME' ] = node_name
  load "#{ RAILS_ROOT }/lib/tasks/disable_node.rake"
  begin
    # rake 0.7.x
    Rake::Task[ 'lucie:disable_node' ].execute
  rescue ArgumentError
    # rake 0.8.x
    Rake::Task[ 'lucie:disable_node' ].execute nil
  end
rescue DRb::DRbConnError
  Lucie::Log.error 'Lucie daemon (lucied) is down.'
  exit -1
rescue MandatoryOptionError => e
  Lucie::Log.error e.message
  STDERR.puts
  STDERR.puts opts
  exit -1
rescue => e
  Lucie::Log.error e.message
  if trace
    e.backtrace.each do | each |
      Lucie::Log.error each
    end
  end
  exit -1
end


verbosity = Lucie::Log.verbose?
Lucie::Log.verbose = true
Lucie::Log.info "Node '#{ node_name }' disabled."
Lucie::Log.verbose = verbosity


### Local variables:
### mode: Ruby
### coding: utf-8-unix
### indent-tabs-mode: nil
### End:
