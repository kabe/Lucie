#!/usr/bin/env ruby


RAILS_ENV = 'install_node'


require File.join( File.dirname( __FILE__ ), '..', 'config', 'environment' )
require 'fileutils'
require 'optparse'


pre_scripts = []
trace = false


opts = OptionParser.new

opts.banner = 'usage: node install <node-name>'

opts.separator ''

opts.on( '-s', '--script script file', String, 'The (Re-)boot scripts executed before installation' ) do | v |
  pre_scripts = v.split( ',' )
end

opts.separator ''

opts.on( '-v', '--verbose', 'Be verbose.' ) do
  Lucie::Log.verbose = true
end

opts.on( '-t', '--trace', 'Print out exception stack traces' ) do
  Lucie::Log.verbose = true
  trace = true
end

opts.on( '-h', '--help', 'Show this help message.' ) do
  puts opts
  exit 1
end

opts.parse! ARGV


node_success = []
node_fail = []


nodes = ARGV.dup


begin
  if nodes.empty?
    raise MandatoryOptionError, 'Node name not defined.'
  end

  nodes.each do | each |
    node = Nodes.find( each )
    unless node
      raise "Node '#{ each }' is not added yet."
    end

    installer = Installers.find( node.installer_name )
    unless installer
      raise "installer '#{ node.installer_name }' is not added yet."
    end
    if installer.last_build.nil?
      raise "installer '#{ node.installer_name }' is not built yet."
    end

    if installer.last_build.status == 'failed'
      raise "installer '#{ node.installer_name }' is broken."
    end

    label = node.latest_install ? node.latest_install.label + 1 : 0
    install_log_dir = File.expand_path( "#{ Configuration.nodes_directory }/#{ each }/install-#{ label }" )
    FileUtils.mkdir_p install_log_dir
    install_log_path = File.join( install_log_dir, 'install.log' )
    Lucie::Log.info "Starting lucie installer."
    Lucie::Log.info "Install log will be redirected to #{ install_log_path }."
    RAILS_DEFAULT_LOGGER.instance_variable_set :@log, File.open( install_log_path, 'w' )
  end

  lucie_daemon = LucieDaemon.server
  lucie_daemon.restart_puppet

  begin
    FileUtils.rm File.expand_path( '~/.ssh/known_hosts' )
  rescue
    # ignore
  end

  pre_scripts.each do | each |
    lucie_daemon.sudo each
  end


  # [WORKAROUND] require libs explicitly because rails autoload
  # mechanism is not thread safe (see
  # http://dev.rubyonrails.org/ticket/9155)
  require 'installer'
  require 'installer_blocker'
  require 'installers'
  require 'nodes'
  require 'popen3/shell'


  Array.new( nodes.size ) do | i |
    Thread.new( i ) do | j |
      Thread.stop

      catch( :node_up ) do
        loop do
          Lucie::Log.info "Connecting to #{ nodes[ j ] }..."
          Popen3::Shell.open do | shell |
            shell.on_success do
              throw :node_up
            end
            shell.exec( %{ssh -o "StrictHostKeyChecking no" root@#{ nodes[ j ] } "grep -q nfsroot /proc/cmdline"}, { :env => { 'LC_ALL' => 'C' } } )
          end
          sleep 10
        end
      end

      begin
        Installer.install Nodes.find( nodes[ j ] )
        node_success << nodes[ j ]
      rescue => e
        Lucie::Log.error e.message
        if trace
          e.backtrace.each do | each |
            Lucie::Log.error each
          end
        end
        node_fail << nodes[ j ]
      end
    end
  end.each do | t |
    t.wakeup
  end.each do | t |
    t.join
  end

  lucie_daemon.disable_node node_success

rescue Interrupt
  Lucie::Log.error 'Interrupted.'
  exit -1
rescue MandatoryOptionError => e
  Lucie::Log.error e.message
  STDERR.puts
  STDERR.puts opts
  exit -1
rescue => e
  Lucie::Log.error e.message
  if trace
    e.backtrace.each do | each |
      Lucie::Log.error each
    end
  end
  exit -1
end


if node_success.size > 0
  Lucie::Log.verbose = true
  Lucie::Log.info "Success (#{ node_success.size } #{ node_success.size == 1 ? 'node' : 'nodes' }: #{ node_success.sort.join( ', ' ) })"
end
if node_fail.size > 0
  Lucie::Log.error "Failed (#{ node_fail.size } #{ node_fail.size == 1 ? 'node' : 'nodes' }: #{ node_fail.sort.join( ', ' ) })"
end


### Local variables:
### mode: Ruby
### coding: utf-8-unix
### indent-tabs-mode: nil
### End:
