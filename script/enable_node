#!/usr/bin/env ruby


# ENV[ 'RAILS_ENV' ] = 'production'

require File.dirname( __FILE__ ) + '/../config/boot'
require RAILS_ROOT + '/config/environment'
require 'optparse'


node_name = ARGV.shift
installer_name = nil
wol = false
trace = false


ARGV.options do | opts |
  opts.banner = 'usage: node enable <node-name> --installer <installer-name>'

  opts.separator ''
  opts.on( '-i', '--installer installer name', String, 'The installer name for the installation' ) do | v |
    installer_name = v
  end

  opts.on( '-t', '--trace', 'Print out exception stack traces' ) do
    trace = true
  end

  opts.separator ''

  opts.on( '-h', '--help', 'Show this help message.' ) do
    puts opts
    exit 1
  end

  args = opts.parse!


  unless node_name and installer_name
    STDERR.puts 'Node name and Installer name are mandatory'
    STDERR.puts
    puts opts
    exit -1
  end

  # Node Name can only contain alphanumeric characters and numbers
  if node_name.match /[^-_a-zA-Z0-9]/
    STDERR.puts "'#{node_name}' is not a valid node name. Node name should only contain alphanumeric characters and numbers, dashes and underscores, and no whitespace."
    exit -1
  end


  unless Nodes.find( node_name )
    STDERR.puts "Node '#{ node_name }' is not added yet. Please add node with 'node add <node-name>' first."
    exit 1
  end


  unless Installers.find( installer_name )
    STDERR.puts "Installer '#{ installer_name }' is not added yet. Please add installer with 'installer add <installer-name>' first."
    exit 1
  end
end


begin
  require RAILS_ROOT + '/config/environment'
  require 'lib/popen3/shell'

  ENV[ 'NODE_NAME' ] = node_name
  ENV[ 'INSTALLER_NAME' ] = installer_name

  # [TODO] sh_exec で失敗した場合の例外をちゃんと上げてほしい。
  sh_exec %{sudo ruby -e "require 'rake'; require '#{ RAILS_ROOT + '/config/environment' }'; load '#{ File.expand_path( RAILS_ROOT ) }/lib/tasks/enable_node.rake'; ENV[ 'NODE_NAME' ] = '#{ node_name }'; ENV[ 'INSTALLER_NAME' ] = '#{ installer_name }'; ENV[ 'WOL' ] = '#{ wol }'; Rake::Task[ 'lucie:enable_node' ].invoke"}
rescue => e
  if trace
    raise
  else
    STDERR.puts "FAILED: #{ e.message }"
    exit -1
  end
end


### Local variables:
### mode: Ruby
### coding: utf-8
### indent-tabs-mode: nil
### End:
