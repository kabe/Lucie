#!/usr/bin/env ruby


require 'lucie/log'
require 'popen3/shell'


################################################################################
# Global options

Lucie::Log.verbose = true


################################################################################
# Functions

# 1. Save all directories and files under the directory,
# 2. Mount tmpfs on top of the directory,
# 3. Extract directories and files into the tmpfs.
def mkrw dirs
  dirs.each do | each |
    unless FileTest.directory?( each )
      Lucie::Log.debug "WARNING: #{ each } is not a directory. Cannot make it writeable."
      next
    end

    begin
      if sh_exec( "mktemp -q -p #{ each }" ).child_status.exitstatus == 0
        Lucie::Log.debug "#{ each } is already writable."
        next
      end
    rescue
      # The directory is not writable. OK.
      nil
    end

    tmpfile = `mktemp`.chomp

    sh_exec "tar -C #{ each } -cf #{ tmpfile } ."
    sh_exec "mount -n -o size=10m -t tmpfs tmpfs #{ each }"
    sh_exec "tar -C #{ each } -xf #{ tmpfile }"
    sh_exec "rm -f #{ tmpfile }"
  end
end


################################################################################
# Create ramdisk

Lucie::Log.info 'Creating a writable area on the install client.'

sh_exec 'mount -n -t proc proc /proc'

begin
  sh_exec 'mount -t tmpfs tmpfs /tmp'
rescue
  ramdevice = '/dev/ram0'
  sh_exec "mke2fs -q -m 0 #{ ramdevice }"
  sh_exec "mount -n #{ ramdevice } /tmp"
end
sh_exec 'mkdir -p /tmp/etc /tmp/target'

mkrw %w(/dev /var/run /var/log /var/lock /var/discover /var/lib/discover /etc/sysconfig /etc/lvm)
mkrw %w(/var/lib/cfengine2 /var/lib/heartbeat /var/puppet /etc/puppet)


################################################################################
# init

sh_exec 'mount -t sysfs sysfs /sys'

hostname = File.read( '/proc/cmdline' ).split( ' ' ).select { | each | each =~ /hostname=.+/ }.first[ 'hostname='.size..-1 ]
sh_exec "hostname #{ hostname }"

if FileTest.executable?( '/etc/init.d/udev' )
  sh_exec '/etc/init.d/udev start'
end
unless FileTest.directory?( '/var/run/network' )
  sh_exec 'mkdir /var/run/network'
end
unless FileTest.directory?( '/dev/shm/network' )
  sh_exec 'mkdir /dev/shm/network'
end

sh_exec 'ifup lo'

if FileTest.executable?( '/sbin/portmap' )
  sh_exec '/sbin/portmap'
end
sh_exec 'mount -t devpts devpts /dev/pts'

sh_exec 'mount -o remount,noatime,ro /dev/root /'

if FileTest.executable?( '/etc/init.d/ganglia-monitor' )
  sh_exec '/etc/init.d/ganglia-monitor start'
end

if FileTest.executable?( '/etc/init.d/cron' )
  sh_exec '/etc/init.d/cron start'
end


################################################################################
# confdir

sh_exec 'echo 6 > /proc/sys/kernel/printk'
sh_exec 'klogd -c7 -f /tmp/kernel.log'
sh_exec 'syslogd -m 0'
sh_exec 'cp -p /etc/resolv.conf-lucieserver /tmp/etc/resolv.conf'


################################################################################
# setup

# create two virtual terminals; access via alt-F2 and alt-F3
sh_exec 'openvt -c2 /bin/bash'
sh_exec 'openvt -c3 /bin/bash'

sh_exec '/usr/sbin/sshd'


################################################################################
# prompt

puts 'Lucie client SUCCESSFULLY started.'
puts 'Waiting for installation jobs to be submitted...'


STDIN.gets
puts 'Rebooting...'
Dir.chdir('/')
sh_exec 'sync'
sh_exec 'killall -q sshd udevd'
sh_exec 'umount /tmp/target/proc'
sh_exec 'umount -ar' rescue nil
exec 'reboot -dfi'


### Local variables:
### mode: Ruby
### coding: euc-jp-unix
### indent-tabs-mode: nil
### End:
