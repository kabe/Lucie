#!/usr/bin/env ruby


RAILS_ENV = 'add_node'


require File.join( File.dirname( __FILE__ ), '..', 'config', 'environment' )
require 'optparse'


Lucie::Log.event "#{ __FILE__ } started."
at_exit do
  Lucie::Log.event "#{ __FILE__ } finished."
end


gateway_address = nil
installer_name = nil
ip_address = nil
mac_address = nil
netmask_address = nil
wol = false
trace = false

# [HACK]
add_only = false


opts = OptionParser.new

opts.banner = 'usage: node add <node-name> --installer <installer-name> -a <IP address> -n <netmask> -g <gateway> --mac <MAC address>'

opts.separator ''

opts.on( '-i', '--installer installer name', String, 'The installer name for the installation' ) do | v |
  installer_name = v
end

opts.on( '-a', '--address address', String, 'IP address' ) do | v |
  ip_address = v
end

opts.on( '-n', '--netmask address', String, 'Netmask address' ) do | v |
  netmask_address = v
end

opts.on( '-g', '--gateway address', String, 'Gateway address' ) do | v |
  gateway_address = v
end

opts.on( '-m', '--mac MAC address', String,
         "The MAC address of the NIC (eg. 00:E0:81:05:D3:8B)" ) do | v|
  mac_address = v
end

opts.separator ''

opts.on( '-w', '--wol', 'Remote power-on using wake on LAN' ) do
  wol = true
end

opts.separator ''

opts.on( '-v', '--verbose', 'Be verbose.' ) do
  Lucie::Log.verbose = true
end

opts.on( '-t', '--trace', 'Print out exception stack traces' ) do
  Lucie::Log.verbose = true
  trace = true
end

opts.on( '-h', '--help', 'Show this help message.' ) do
  puts opts
  exit 1
end

opts.separator ''

opts.on( '-A', '--add-only', '[HACK] node add only (do not enable).' ) do
  add_only = true
end

opts.parse! ARGV


begin
  node_name = ARGV.shift

  unless node_name
    raise MandatoryOptionError, 'Node name not defined.'
  end
  overwrite_node = Nodes.find( node_name ) ? true : false

  if ( not add_only ) and ( not installer_name )
    raise MandatoryOptionError, 'Installer name not defined.'
    unless Installers.find( installer_name )
      raise "Installer '#{ installer_name }' is not added yet."
    end
  end

  ENV[ 'NODE_NAME' ] = node_name
  ENV[ 'INSTALLER_NAME' ] = installer_name
  ENV[ 'MAC_ADDRESS' ] = mac_address
  ENV[ 'IP_ADDRESS' ] = ip_address
  ENV[ 'GATEWAY_ADDRESS' ] = gateway_address
  ENV[ 'NETMASK_ADDRESS' ] = netmask_address
  ENV[ 'WOL' ] = wol ? 1 : nil

  load "#{ RAILS_ROOT }/lib/tasks/add_node.rake"
  load "#{ RAILS_ROOT }/lib/tasks/enable_node.rake"

  Rake::Task[ 'lucie:add_node' ].execute
  # [HACK]
  if add_only
    exit
  end
  Rake::Task[ 'lucie:enable_node' ].execute

rescue DRb::DRbConnError
  Lucie::Log.error 'Lucie daemon (lucied) is down.'
  unless overwrite_node
    Nodes.remove!( node_name ) rescue nil
  end
  exit -1
rescue MandatoryOptionError => e
  Lucie::Log.error e.message
  STDERR.puts
  STDERR.puts opts
  exit -1
rescue => e
  Lucie::Log.error e.message
  unless overwrite_node
    Nodes.remove!( node_name ) rescue nil
  end
  if trace
    e.backtrace.each do | each |
      Lucie::Log.error each
    end
  end
  exit -1
end


verbosity = Lucie::Log.verbose?
Lucie::Log.verbose = true
Lucie::Log.info "Node '#{ node_name }' added."
Lucie::Log.verbose = verbosity


### Local variables:
### mode: Ruby
### coding: utf-8-unix
### indent-tabs-mode: nil
### End:
