#!/usr/bin/env ruby
#
# $Id$
#
# Author::   Yasuhito Takamiya (mailto:yasuhito@gmail.com)
# Revision:: $Revision$
# License::  GPL2


require 'lucie'
require 'popen3/shell'


Lucie.logging_level = :debug


include Lucie


info "Creating a writable area on the install client."

sh_exec "mount -n -t proc proc /proc"
sh_exec "mount -t tmpfs tmpfs /tmp"
sh_exec "mkdir -p /tmp/etc /tmp/target"


def mkrw dirs
  dirs.each do | each |
    unless FileTest.directory?( each )
      debug "WARNING: #{ each } is not a directory. Cannot make it writeable."
      next
    end
    if sh_exec( "mktemp -q -p #{ each }").child_status.exitstatus == 0
      debug "#{ each } is already writable."
      next
    end

    tmpfile = `mktemp`.chomp
    sh_exec "tar -C #{ each } -cf #{ tmpfile } ."
    sh_exec "mount -n -o size=10m -t tmpfs tmpfs #{ each }"
    sh_exec "tar -C #{ each } -xf #{ tmpfile }"
    sh_exec "rm -f #{ tmpfile }"
  end
end


mkrw %w(/dev /var/run /var/log /var/lock /var/discover /var/lib/discover /etc/sysconfig /etc/lvm)
mkrw %w(/var/lib/cfengine2 /var/lib/heardbeat)


################################################################################
# init

sh_exec 'mount -t sysfs sysfs /sys'
if FileTest.executable?( '/etc/init.d/udev' )
  sh_exec '/etc/init.d/udev start'
end
unless FileTest.directory?( '/var/run/network' )
  sh_exec 'mkdir /var/run/network'
end
unless FileTest.directory?( '/dev/shm/network' )
  sh_exec 'mkdir /dev/shm/network'
end
sh_exec 'ifup lo'
if FileTest.executable?( '/sbin/portmap' )
  sh_exec '/sbin/portmap'
end
sh_exec 'mount -t devpts devpts /dev/pts'

sh_exec 'mount -o remount,noatime,ro /dev/root /'


################################################################################
# task_confdir

sh_exec 'syslogd -m 0'
sh_exec 'cp -p /etc/resolv.conf-lucieserver /tmp/etc/resolv.conf'


################################################################################
# task_setup

# create two virtual terminals; access via alt-F2 and alt-F3
sh_exec 'openvt -c2 /bin/bash'
sh_exec 'openvt -c3 /bin/bash'

sh_exec '/usr/sbin/sshd'


################################################################################
# task_partition

info 'Partitioning local harddisks'
sh_exec 'setup_harddisks -d -X -l /tmp'


################################################################################
# task_mountdisks

info 'Mounting local harddisks'
sh_exec 'mount2dir /tmp/target /tmp/fstab'


################################################################################
# task_extrbase

info 'Extracting base system'

sh_exec "zcat /var/tmp/*.tgz | tar -C /tmp/target -xpf -"
sh_exec "mv /tmp/target/etc/fstab /tmp/target/etc/fstab.old" 
sh_exec "cp -a /tmp/fstab /tmp/target/etc/fstab" 


################################################################################
# task_updatebase


sh_exec 'cp /etc/apt/sources.list.client /tmp/target/etc/apt/sources.list'

# some packages must access /proc even in chroot environment
sh_exec 'mount -t proc proc /tmp/target/proc'

# some packages must access /sys even in chroot environment
sh_exec 'mount -t sysfs sysfs /tmp/target/sys'

# if we are using udev, also mount it into /tmp/target
if FileTest.exists?( '/etc/init.d/udev' )
  sh_exec 'mount --bind /dev /tmp/target/dev'
end

# [XXX] duplicated!
def divert *path
  path.each do | each |
    sh_exec "chroot /tmp/target dpkg-divert --package lucie --rename --add #{ each }"
    diversion_path = File.join( '/tmp/target', each )
    File.open( diversion_path, 'w' ) do | file |
      file.puts( <<-DIVERSION )
#! /bin/sh
# diversion of #{ diversion_path } created by Lucie
exit 0
DIVERSION
    end
    sh_exec "chmod a+rx #{ diversion_path }"
  end
end

# if libc is upgraded init u is called in chroot environment and then
# init will eat up much cpu time
divert '/sbin/init', '/usr/sbin/liloconfig', '/usr/sbin/invoke-rc.d'
# fake some more programs
divert '/etc/init.d/nis', '/sbin/start-stop-daemon', '/usr/sbin/policy-rc.d'
sh_exec 'cp /sbin/start-stop-daemon /tmp/target/sbin/start-stop-daemon'
# never start any daemons inside chroot during installation
File.open( '/tmp/target/usr/sbin/policy-rc.d', 'w' ) do | file |
  file.puts( <<-POLICY_RC )
#! /bin/sh
exit 101
POLICY_RC
  sh_exec 'chmod a+rx /tmp/target/usr/sbin/policy-rc.d'
end

# update the apt-get information inside the nfsroot
apt_option = '-y -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold"'
sh_exec "chroot /tmp/target apt-get #{ apt_option } update"
begin
  sh_exec "chroot /tmp/target apt-get #{ apt_option } check"
rescue
  sh_exec "chroot /tmp/target apt-get -f install </dev/null"
end
begin
  sh_exec "chroot /tmp/target dpkg -C"
rescue
  sh_exec "yes '' | chroot /tmp/target dpkg --configure -a"
end
sh_exec "chroot /tmp/target apt-get -f -y dist-upgrade </dev/null"
# update dpkg info which packages are available
tmpfile = `chroot /tmp/target mktemp`.chomp
sh_exec "chroot /tmp/target apt-cache dumpavail > /tmp/target/#{ tmpfile }"
sh_exec "chroot /tmp/target dpkg --update-avail #{ tmpfile }"
sh_exec "rm -f /tmp/target/#{ tmpfile }"


################################################################################
# task_instsoft

system "install_packages --config-file=/etc/lucie/package.rb"


################################################################################
# task_lucieend


def jobs_running
  return system( %{ps r | egrep -qv "ps r|TIME COMMAND" } )
end


def wait_for_jobs
  while jobs_running
    info 'Waiting for background jobs to finish.'
    sleep 10
  end
end


wait_for_jobs
info 'Press <RETURN> to reboot or ctrol-c to execute a shell.'
STDIN.gets
info 'Rebooting...'
Dir.chdir('/')
sh_exec 'sync'
sh_exec 'killall -q sshd udevd'
sh_exec 'umount /tmp/target/proc'
sh_exec 'umount -ar'
exec 'reboot -dfi'


### Local variables:
### mode: Ruby
### coding: euc-jp-unix
### indent-tabs-mode: nil
### End:

