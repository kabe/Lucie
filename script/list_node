#!/usr/bin/env ruby


RAILS_ENV = 'list_node'


require File.join( File.dirname( __FILE__ ), '..', 'config', 'environment' )
require 'optparse'


Lucie::Log.event "#{ __FILE__ } started."
at_exit do
  Lucie::Log.event "#{ __FILE__ } finished."
end


trace = false


opts = OptionParser.new
opts.banner = 'usage: node list'

opts.separator ''

opts.on( '-v', '--verbose', 'Be verbose.' ) do
  Lucie::Log.verbose = true
end

opts.on( '-t', '--trace', 'Print out exception stack traces' ) do
  Lucie::Log.verbose = true
  trace = true
end

opts.separator ''

opts.on( '-h', '--help', 'Show this help message.' ) do
  puts opts
  exit 1
end

opts.parse! ARGV


begin
  nodes = Nodes.load_all

  puts "Nodes directory = '#{ Configuration.nodes_directory }'"
  
  if nodes.size == 0
    puts 'No node is added yet.'
  else
    nodes.list.each do | each |
      if each.latest_install and each.latest_install.incomplete?
        printf "incomplete %s (installer = %s)\n", each.name, each.installer_name
      elsif each.latest_install and each.latest_install.failed?
        printf "      fail %s (installer = %s)\n", each.name, each.installer_name
      elsif each.enable?
        printf "     ready %s (installer = %s)\n", each.name, each.installer_name
      elsif each.latest_install
        printf "%10s %s (installer = %s)\n", each.latest_install.status, each.name, each.installer_name
      else
        printf "           %s (installer = %s)\n", each.name, each.installer_name
      end
    end
  end
rescue => e
  Lucie::Log.error e.message  
  if trace
    e.backtrace.each do | each |
      Lucie::Log.error each
    end
  end
  exit -1
end


### Local variables:
### mode: Ruby
### coding: utf-8-unix
### indent-tabs-mode: nil
### End:
