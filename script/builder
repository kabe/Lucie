#!/usr/bin/env ruby
#
# $Id$
#
# Author:: Yasuhito Takamiya (mailto:yasuhito@gmail.com)
# Revision:: $LastChangedRevision$
# License:: GPL2


RAILS_ENV = 'builder'
LUCIE_THIS_PROCESS_IS_BUILDER = true


require File.dirname( __FILE__ ) + '/../config/boot'
require 'optparse'


INSTALLER_OPTIONS = {  :verbose => false }


ARGV.options do | opts |
  opts.banner = "Usage: installer build <installer_name> [options]"

  opts.separator ""

  opts.on("-t", "--trace", "Trace-level (verbose) logging") do
    INSTALLER_OPTIONS[ :verbose ] = true 
  end
  opts.on( "-h", "--help", "Show this help message." ) do
    puts opts
    exit
  end

  args = opts.parse!

  unless args.length == 1
    STDERR.puts "Installer name not specified"
    STDERR.puts
    puts opts
    exit -1
  end

  INSTALLER_OPTIONS[ :installer_name ] = args[ 0 ]
  INSTALLER_OPTIONS[ :log_file_name ] = "log/#{ INSTALLER_OPTIONS[ :installer_name ] }_builder.log"
end


require RAILS_ROOT + "/config/environment"
if File.exists?( "#{ RAILS_ROOT }/config/site_config.rb" )
  require 'site_config'
end

Lucie::Log.verbose = INSTALLER_OPTIONS[ :verbose ]

installer_path = File.expand_path( File.join( Configuration.installers_directory, INSTALLER_OPTIONS[ :installer_name ] ) )

unless File.directory?( installer_path )
  STDERR.puts "Installer '#{ INSTALLER_OPTIONS[ :installer_name ] }' not found in '#{ Configuration.installers_directory }'"
  exit -1
end


def write_to_log_and_console message, severity = :info
  Lucie::Log.event( message, severity ) rescue nil
  (puts message unless INSTALLER_OPTIONS[ :verbose ]) rescue nil 
end


def cleanup(installer)
  write_to_log_and_console "Builder for installer '#{INSTALLER_OPTIONS[:installer_name]}' exited"
  if installer
    InstallerBlocker.release(installer) rescue nil
  end
end


def load_installer path
  begin
    Installer.read path
  rescue Exception => e
    write_to_log_and_console 'Failed to load the new installer configuration. The builder will stop.', :fatal
    raise
  end
end


installer = nil


begin
  begin
    installer = load_installer( installer_path )

    # this will create builder.pid file in installer's CC directory and grab an exclusive lock on it, or else
    # blow up saying that something else is already locking it
    InstallerBlocker.block installer

    write_to_log_and_console "Builder for installer '#{installer.name}' started"
    puts "Logging to: #{File.expand_path(INSTALLER_OPTIONS[:log_file_name])}"

    loop do
      catch( :reload_installer ) do
        installer.scheduler.run
      end
      installer = load_installer( installer_path )
      # this will cause the next call to scheduler to run the build immediately
      installer.request_build rescue nil
    end
  rescue Interrupt
    # this is okay, we're just control-c'ing the app
  rescue Exception => e
    begin 
      Lucie::Log.fatal(e)
          
      rescue => logging_error
        STDERR.puts e.message
        STDERR.puts e.backtrace
        STDERR.puts "Attempt to log the above error failed with this:"
        STDERR.puts logging_error.message
        STDERR.puts logging_error.backtrace
    end
    INSTALLER_OPTIONS[:verbose] ? raise : exit(1)
  ensure
    cleanup(installer)
  end
end


### Local variables:
### mode: Ruby
### coding: utf-8
### indent-tabs-mode: nil
### End:
